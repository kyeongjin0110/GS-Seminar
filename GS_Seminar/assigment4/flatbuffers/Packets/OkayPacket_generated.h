// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_OKAYPACKET_PACKETS_H_
#define FLATBUFFERS_GENERATED_OKAYPACKET_PACKETS_H_

#include "../flatbuffers/flatbuffers.h"

namespace Packets {

struct OkayPacket;

struct OkayPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct OkayPacketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(OkayPacket::VT_ID, id, 0); }
  OkayPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  OkayPacketBuilder &operator=(const OkayPacketBuilder &);
  flatbuffers::Offset<OkayPacket> Finish() {
    auto o = flatbuffers::Offset<OkayPacket>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<OkayPacket> CreateOkayPacket(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  OkayPacketBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const Packets::OkayPacket *GetOkayPacket(const void *buf) { return flatbuffers::GetRoot<Packets::OkayPacket>(buf); }

inline bool VerifyOkayPacketBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Packets::OkayPacket>(nullptr); }

inline void FinishOkayPacketBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Packets::OkayPacket> root) { fbb.Finish(root); }

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_OKAYPACKET_PACKETS_H_
