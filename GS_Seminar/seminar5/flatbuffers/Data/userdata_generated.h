// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_USERDATA_DATA_H_
#define FLATBUFFERS_GENERATED_USERDATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

namespace Data {

struct UserData;

struct UserData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct UserDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(UserData::VT_ID, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(UserData::VT_NAME, name); }
  UserDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UserDataBuilder &operator=(const UserDataBuilder &);
  flatbuffers::Offset<UserData> Finish() {
    auto o = flatbuffers::Offset<UserData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<UserData> CreateUserData(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  UserDataBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserData> CreateUserDataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr) {
  return CreateUserData(_fbb, id, name ? _fbb.CreateString(name) : 0);
}

inline const Data::UserData *GetUserData(const void *buf) { return flatbuffers::GetRoot<Data::UserData>(buf); }

inline bool VerifyUserDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::UserData>(nullptr); }

inline void FinishUserDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::UserData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_USERDATA_DATA_H_
