// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INTRODATA_DATA_H_
#define FLATBUFFERS_GENERATED_INTRODATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

#include "AppointedData_generated.h"
#include "UserData_generated.h"

namespace Data {

struct IntroData;

struct IntroData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER = 4,
    VT_APPOINTED = 6
  };
  const Data::UserData *user() const { return GetPointer<const Data::UserData *>(VT_USER); }
  const Data::AppointedData *appointed() const { return GetPointer<const Data::AppointedData *>(VT_APPOINTED); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_APPOINTED) &&
           verifier.VerifyTable(appointed()) &&
           verifier.EndTable();
  }
};

struct IntroDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user(flatbuffers::Offset<Data::UserData> user) { fbb_.AddOffset(IntroData::VT_USER, user); }
  void add_appointed(flatbuffers::Offset<Data::AppointedData> appointed) { fbb_.AddOffset(IntroData::VT_APPOINTED, appointed); }
  IntroDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  IntroDataBuilder &operator=(const IntroDataBuilder &);
  flatbuffers::Offset<IntroData> Finish() {
    auto o = flatbuffers::Offset<IntroData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<IntroData> CreateIntroData(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Data::UserData> user = 0,
    flatbuffers::Offset<Data::AppointedData> appointed = 0) {
  IntroDataBuilder builder_(_fbb);
  builder_.add_appointed(appointed);
  builder_.add_user(user);
  return builder_.Finish();
}

inline const Data::IntroData *GetIntroData(const void *buf) { return flatbuffers::GetRoot<Data::IntroData>(buf); }

inline bool VerifyIntroDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::IntroData>(nullptr); }

inline void FinishIntroDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::IntroData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_INTRODATA_DATA_H_
