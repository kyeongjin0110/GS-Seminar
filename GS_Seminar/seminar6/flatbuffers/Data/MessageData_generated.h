// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGEDATA_DATA_H_
#define FLATBUFFERS_GENERATED_MESSAGEDATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

#include "UserData_generated.h"

namespace Data {

struct MessageData;

struct MessageData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER = 4,
    VT_MSG = 6
  };
  const Data::UserData *user() const { return GetPointer<const Data::UserData *>(VT_USER); }
  const flatbuffers::String *msg() const { return GetPointer<const flatbuffers::String *>(VT_MSG); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           verifier.EndTable();
  }
};

struct MessageDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user(flatbuffers::Offset<Data::UserData> user) { fbb_.AddOffset(MessageData::VT_USER, user); }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) { fbb_.AddOffset(MessageData::VT_MSG, msg); }
  MessageDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MessageDataBuilder &operator=(const MessageDataBuilder &);
  flatbuffers::Offset<MessageData> Finish() {
    auto o = flatbuffers::Offset<MessageData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MessageData> CreateMessageData(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Data::UserData> user = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  MessageDataBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_user(user);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessageData> CreateMessageDataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Data::UserData> user = 0,
    const char *msg = nullptr) {
  return CreateMessageData(_fbb, user, msg ? _fbb.CreateString(msg) : 0);
}

inline const Data::MessageData *GetMessageData(const void *buf) { return flatbuffers::GetRoot<Data::MessageData>(buf); }

inline bool VerifyMessageDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::MessageData>(nullptr); }

inline void FinishMessageDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::MessageData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_MESSAGEDATA_DATA_H_
