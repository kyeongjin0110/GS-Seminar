// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DISCONNECTEDDATA_DATA_H_
#define FLATBUFFERS_GENERATED_DISCONNECTEDDATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

#include "AppointedData_generated.h"

namespace Data {

struct DisconnectedData;

struct DisconnectedData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_APPOINTED = 4,
    VT_DISCONNECTEDID = 6
  };
  const Data::AppointedData *appointed() const { return GetPointer<const Data::AppointedData *>(VT_APPOINTED); }
  int32_t disconnectedID() const { return GetField<int32_t>(VT_DISCONNECTEDID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_APPOINTED) &&
           verifier.VerifyTable(appointed()) &&
           VerifyField<int32_t>(verifier, VT_DISCONNECTEDID) &&
           verifier.EndTable();
  }
};

struct DisconnectedDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_appointed(flatbuffers::Offset<Data::AppointedData> appointed) { fbb_.AddOffset(DisconnectedData::VT_APPOINTED, appointed); }
  void add_disconnectedID(int32_t disconnectedID) { fbb_.AddElement<int32_t>(DisconnectedData::VT_DISCONNECTEDID, disconnectedID, 0); }
  DisconnectedDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DisconnectedDataBuilder &operator=(const DisconnectedDataBuilder &);
  flatbuffers::Offset<DisconnectedData> Finish() {
    auto o = flatbuffers::Offset<DisconnectedData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<DisconnectedData> CreateDisconnectedData(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Data::AppointedData> appointed = 0,
    int32_t disconnectedID = 0) {
  DisconnectedDataBuilder builder_(_fbb);
  builder_.add_disconnectedID(disconnectedID);
  builder_.add_appointed(appointed);
  return builder_.Finish();
}

inline const Data::DisconnectedData *GetDisconnectedData(const void *buf) { return flatbuffers::GetRoot<Data::DisconnectedData>(buf); }

inline bool VerifyDisconnectedDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::DisconnectedData>(nullptr); }

inline void FinishDisconnectedDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::DisconnectedData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_DISCONNECTEDDATA_DATA_H_
