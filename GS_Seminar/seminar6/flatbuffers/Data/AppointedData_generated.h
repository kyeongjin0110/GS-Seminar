// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_APPOINTEDDATA_DATA_H_
#define FLATBUFFERS_GENERATED_APPOINTEDDATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

namespace Data {

struct AppointedData;

struct AppointedData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_APPOINTEDID = 4,
    VT_CHANGED = 6
  };
  int32_t appointedID() const { return GetField<int32_t>(VT_APPOINTEDID, 0); }
  bool changed() const { return GetField<uint8_t>(VT_CHANGED, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_APPOINTEDID) &&
           VerifyField<uint8_t>(verifier, VT_CHANGED) &&
           verifier.EndTable();
  }
};

struct AppointedDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_appointedID(int32_t appointedID) { fbb_.AddElement<int32_t>(AppointedData::VT_APPOINTEDID, appointedID, 0); }
  void add_changed(bool changed) { fbb_.AddElement<uint8_t>(AppointedData::VT_CHANGED, static_cast<uint8_t>(changed), 0); }
  AppointedDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AppointedDataBuilder &operator=(const AppointedDataBuilder &);
  flatbuffers::Offset<AppointedData> Finish() {
    auto o = flatbuffers::Offset<AppointedData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<AppointedData> CreateAppointedData(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t appointedID = 0,
    bool changed = false) {
  AppointedDataBuilder builder_(_fbb);
  builder_.add_appointedID(appointedID);
  builder_.add_changed(changed);
  return builder_.Finish();
}

inline const Data::AppointedData *GetAppointedData(const void *buf) { return flatbuffers::GetRoot<Data::AppointedData>(buf); }

inline bool VerifyAppointedDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::AppointedData>(nullptr); }

inline void FinishAppointedDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::AppointedData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_APPOINTEDDATA_DATA_H_
