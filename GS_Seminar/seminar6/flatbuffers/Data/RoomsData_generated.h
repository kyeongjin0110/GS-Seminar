// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ROOMSDATA_DATA_H_
#define FLATBUFFERS_GENERATED_ROOMSDATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

#include "RoomData_generated.h"

namespace Data {

struct RoomsData;

struct RoomsData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ROOMS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Data::RoomData>> *rooms() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Data::RoomData>> *>(VT_ROOMS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ROOMS) &&
           verifier.Verify(rooms()) &&
           verifier.VerifyVectorOfTables(rooms()) &&
           verifier.EndTable();
  }
};

struct RoomsDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rooms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::RoomData>>> rooms) { fbb_.AddOffset(RoomsData::VT_ROOMS, rooms); }
  RoomsDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RoomsDataBuilder &operator=(const RoomsDataBuilder &);
  flatbuffers::Offset<RoomsData> Finish() {
    auto o = flatbuffers::Offset<RoomsData>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<RoomsData> CreateRoomsData(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::RoomData>>> rooms = 0) {
  RoomsDataBuilder builder_(_fbb);
  builder_.add_rooms(rooms);
  return builder_.Finish();
}

inline flatbuffers::Offset<RoomsData> CreateRoomsDataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Data::RoomData>> *rooms = nullptr) {
  return CreateRoomsData(_fbb, rooms ? _fbb.CreateVector<flatbuffers::Offset<Data::RoomData>>(*rooms) : 0);
}

inline const Data::RoomsData *GetRoomsData(const void *buf) { return flatbuffers::GetRoot<Data::RoomsData>(buf); }

inline bool VerifyRoomsDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::RoomsData>(nullptr); }

inline void FinishRoomsDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::RoomsData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_ROOMSDATA_DATA_H_
