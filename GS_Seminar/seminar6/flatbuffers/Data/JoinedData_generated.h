// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_JOINEDDATA_DATA_H_
#define FLATBUFFERS_GENERATED_JOINEDDATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

#include "AppointedData_generated.h"
#include "UserData_generated.h"

namespace Data {

struct JoinedData;

struct JoinedData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER = 4,
    VT_JOINED = 6,
    VT_APPOINTED = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<Data::UserData>> *user() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Data::UserData>> *>(VT_USER); }
  int32_t joined() const { return GetField<int32_t>(VT_JOINED, 0); }
  const Data::AppointedData *appointed() const { return GetPointer<const Data::AppointedData *>(VT_APPOINTED); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER) &&
           verifier.Verify(user()) &&
           verifier.VerifyVectorOfTables(user()) &&
           VerifyField<int32_t>(verifier, VT_JOINED) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_APPOINTED) &&
           verifier.VerifyTable(appointed()) &&
           verifier.EndTable();
  }
};

struct JoinedDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::UserData>>> user) { fbb_.AddOffset(JoinedData::VT_USER, user); }
  void add_joined(int32_t joined) { fbb_.AddElement<int32_t>(JoinedData::VT_JOINED, joined, 0); }
  void add_appointed(flatbuffers::Offset<Data::AppointedData> appointed) { fbb_.AddOffset(JoinedData::VT_APPOINTED, appointed); }
  JoinedDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JoinedDataBuilder &operator=(const JoinedDataBuilder &);
  flatbuffers::Offset<JoinedData> Finish() {
    auto o = flatbuffers::Offset<JoinedData>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<JoinedData> CreateJoinedData(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::UserData>>> user = 0,
    int32_t joined = 0,
    flatbuffers::Offset<Data::AppointedData> appointed = 0) {
  JoinedDataBuilder builder_(_fbb);
  builder_.add_appointed(appointed);
  builder_.add_joined(joined);
  builder_.add_user(user);
  return builder_.Finish();
}

inline flatbuffers::Offset<JoinedData> CreateJoinedDataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Data::UserData>> *user = nullptr,
    int32_t joined = 0,
    flatbuffers::Offset<Data::AppointedData> appointed = 0) {
  return CreateJoinedData(_fbb, user ? _fbb.CreateVector<flatbuffers::Offset<Data::UserData>>(*user) : 0, joined, appointed);
}

inline const Data::JoinedData *GetJoinedData(const void *buf) { return flatbuffers::GetRoot<Data::JoinedData>(buf); }

inline bool VerifyJoinedDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::JoinedData>(nullptr); }

inline void FinishJoinedDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::JoinedData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_JOINEDDATA_DATA_H_
