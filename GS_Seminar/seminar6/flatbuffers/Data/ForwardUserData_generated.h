// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FORWARDUSERDATA_DATA_H_
#define FLATBUFFERS_GENERATED_FORWARDUSERDATA_DATA_H_

#include "../flatbuffers/flatbuffers.h"

#include "UserData_generated.h"

namespace Data {

struct ForwardUserData;

struct ForwardUserData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER = 4,
    VT_ADDRESS = 6
  };
  const Data::UserData *user() const { return GetPointer<const Data::UserData *>(VT_USER); }
  const flatbuffers::String *address() const { return GetPointer<const flatbuffers::String *>(VT_ADDRESS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ADDRESS) &&
           verifier.Verify(address()) &&
           verifier.EndTable();
  }
};

struct ForwardUserDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user(flatbuffers::Offset<Data::UserData> user) { fbb_.AddOffset(ForwardUserData::VT_USER, user); }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) { fbb_.AddOffset(ForwardUserData::VT_ADDRESS, address); }
  ForwardUserDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ForwardUserDataBuilder &operator=(const ForwardUserDataBuilder &);
  flatbuffers::Offset<ForwardUserData> Finish() {
    auto o = flatbuffers::Offset<ForwardUserData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ForwardUserData> CreateForwardUserData(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Data::UserData> user = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0) {
  ForwardUserDataBuilder builder_(_fbb);
  builder_.add_address(address);
  builder_.add_user(user);
  return builder_.Finish();
}

inline flatbuffers::Offset<ForwardUserData> CreateForwardUserDataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Data::UserData> user = 0,
    const char *address = nullptr) {
  return CreateForwardUserData(_fbb, user, address ? _fbb.CreateString(address) : 0);
}

inline const Data::ForwardUserData *GetForwardUserData(const void *buf) { return flatbuffers::GetRoot<Data::ForwardUserData>(buf); }

inline bool VerifyForwardUserDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::ForwardUserData>(nullptr); }

inline void FinishForwardUserDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::ForwardUserData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_FORWARDUSERDATA_DATA_H_
